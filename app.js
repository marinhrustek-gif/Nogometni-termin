/* global firebase */
const { useState, useEffect, useMemo } = React;
/* helpers */
function saveLS(k,v){ localStorage.setItem(k, JSON.stringify(v)); }
function loadLS(k,f){ try{ const v=JSON.parse(localStorage.getItem(k)||"null"); return v ?? f; } catch { return f; } }
function uid(prefix="id"){ return prefix+"_"+Math.random().toString(36).slice(2,10); }
const TEAM_ORDER = ["Crvena","Crna","Bijela","Plava"];
const DEFAULT_SETTINGS = { points:{win:3,draw:1,loss:0}, allowPlayoffsOnFourTeams:true, accessCode:"", teamColors:{ Crvena:{bg:"#fee2e2",text:"#991b1b",border:"#fecaca"}, Crna:{bg:"#f3f4f6",text:"#111827",border:"#e5e7eb"}, Bijela:{bg:"#ffffff",text:"#1f2937",border:"#e5e7eb"}, Plava:{bg:"#dbeafe",text:"#1e40af",border:"#bfdbfe"}, }, seasons:[] };
function teamStyle(settings, team){ const tc=(settings.teamColors||{})[team]||{bg:'#f1f5f9',text:'#0f172a',border:'#cbd5e1'}; return {backgroundColor:tc.bg,color:tc.text,borderColor:tc.border}; }
function inRange(dateISO, from, to){ if(!from && !to) return true; const d=new Date(dateISO); if(from && d<new Date(from)) return false; if(to && d>new Date(to+"T23:59:59")) return false; return true; }
function calc(scoreA,scoreB,settings){ if(scoreA==null||scoreB==null) return {a:0,b:0,aGD:0,bGD:0}; const aGD=scoreA-scoreB,bGD=-aGD; if(scoreA>scoreB) return {a:settings.points.win,b:settings.points.loss,aGD,bGD}; if(scoreB>scoreA) return {a:settings.points.loss,b:settings.points.win,aGD,bGD}; return {a:settings.points.draw,b:settings.points.draw,aGD,bGD}; }
function emptyMatches(teams){ const pairs=[]; for(let i=0;i<teams.length;i++){ for(let j=i+1;j<teams.length;j++){ pairs.push([teams[i],teams[j]]); } } return pairs.map(([a,b])=>({id:uid("m"),teamA:a,teamB:b,scoreA:null,scoreB:null,playersA:[],playersB:[]})); }
function playoffs(order){ if(order.length!==4) return []; const [t1,t2,t3,t4]=order; return [{id:uid("pf"),teamA:t1,teamB:t2,scoreA:null,scoreB:null,playersA:[],playersB:[]},{id:uid("pf"),teamA:t3,teamB:t4,scoreA:null,scoreB:null,playersA:[],playersB:[]}]; }
function computeOverall(players,sessions,settings){ const byId=new Map(players.map(p=>[p.id,p])); const agg=new Map(); const ensure=(id,name,isGK)=>{ if(!agg.has(id)) agg.set(id,{id,name,isGK:!!isGK,matches:0,points:0,gd:0,sessions:0}); return agg.get(id); }; for(const s of sessions){ const present=new Set(); for(const m of s.matches){ const {a,b,aGD,bGD}=calc(m.scoreA,m.scoreB,settings); const finished=m.scoreA!=null&&m.scoreB!=null; const apply=(ids,pts,gd)=>{ for(const pid of ids||[]){ const p=byId.get(pid); if(!p) continue; const row=ensure(p.id,p.name,p.isGK); present.add(p.id); if(finished){ row.matches++; row.points+=pts; row.gd+=gd; } } }; apply(m.playersA,a,aGD); apply(m.playersB,b,bGD); } for(const pid of present){ const row=agg.get(pid); if(row) row.sessions++; } } return { playersSorted: Array.from(agg.values()).sort((x,y)=> y.points-y.points || y.gd-y.gd) }; }
/* ui primitives */
function Badge({children, className="", style}){ return <span className={"inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-medium "+className} style={style}>{children}</span>; }
function Button({children,onClick,type="button",className="",disabled}){ return <button type={type} disabled={disabled} onClick={onClick} className={"rounded-2xl border px-3 py-2 text-sm font-medium shadow-sm hover:shadow disabled:opacity-50 "+className}>{children}</button>; }
function Card({title,children,right}){ return (<div className="rounded-2xl border bg-white shadow-sm"><div className="flex items-center justify-between border-b px-4 py-3"><h3 className="text-base font-semibold">{title}</h3>{right}</div><div className="p-4">{children}</div></div>); }
function Input({value,onChange,placeholder,type="text",className="",...rest}){ return <input type={type} value={value} onChange={(e)=>onChange?.(e.target.value)} placeholder={placeholder} className={"w-full rounded-xl border px-3 py-2 text-sm outline-none focus:ring "+className} {...rest}/>; }
function Select({value,onChange,options,className=""}){ return <select value={value} onChange={(e)=>onChange?.(e.target.value)} className={"w-full rounded-xl border px-3 py-2 text-sm outline-none focus:ring "+className}>{options.map(o=><option key={o.value} value={o.value}>{o.label}</option>)}</select>; }
/* app */
function App({boot}){
  const [settings,setSettings]=useState(()=>loadLS("nt_settings", DEFAULT_SETTINGS));
  const [players,setPlayers]=useState(()=>loadLS("nt_players",[]));
  const [sessions,setSessions]=useState(()=>loadLS("nt_sessions",[]));
  const [signups,setSignups]=useState(()=>loadLS("nt_signups",[]));
  const [tab,setTab]=useState("Pregled");
  const [authed,setAuthed]=useState(()=>{ const saved=loadLS("nt_authed",false); if(settings.accessCode && !saved) return false; return true; });
  useEffect(()=>saveLS("nt_settings",settings),[settings]);
  useEffect(()=>saveLS("nt_players",players),[players]);
  useEffect(()=>saveLS("nt_sessions",sessions),[sessions]);
  useEffect(()=>saveLS("nt_signups",signups),[signups]);
  useEffect(()=>saveLS("nt_authed",authed),[authed]);
  const cfg = boot.firebaseConfig, gid = (boot.groupId||"").trim();
  if(!cfg || !gid) return <SetupLink />;
  useEffect(()=>{ try{ if(!firebase.apps.length) firebase.initializeApp(cfg); const db=firebase.firestore(); const ref=db.collection("groups").doc(gid);
    ref.get().then(snap=>{ if(snap.exists){ const remote=snap.data(); const r=remote?.updatedAt||0, l=parseInt(localStorage.getItem("nt_updatedAt")||"0",10); if(r>l){ setSettings(remote.settings||DEFAULT_SETTINGS); setPlayers(remote.players||[]); setSessions(remote.sessions||[]); setSignups(remote.signups||[]); localStorage.setItem("nt_updatedAt", String(r)); } } });
    const unsub=ref.onSnapshot(snap=>{ if(!snap.exists) return; const remote=snap.data(); const r=remote?.updatedAt||0, l=parseInt(localStorage.getItem("nt_updatedAt")||"0",10); if(r<=l) return; setSettings(remote.settings||DEFAULT_SETTINGS); setPlayers(remote.players||[]); setSessions(remote.sessions||[]); setSignups(remote.signups||[]); localStorage.setItem("nt_updatedAt", String(r)); }); return ()=>unsub(); }catch(e){ console.error(e); } },[cfg,gid]);
  useEffect(()=>{ if(!cfg||!gid||!firebase.apps.length) return; const db=firebase.firestore(); const ref=db.collection("groups").doc(gid); const t=setTimeout(async()=>{ try{ const payload={settings,players,sessions,signups,updatedAt:Date.now()}; await ref.set(payload,{merge:true}); localStorage.setItem("nt_updatedAt", String(payload.updatedAt)); }catch(e){ console.error(e);} },400); return ()=>clearTimeout(t); },[settings,players,sessions,signups,cfg,gid]);
  if(!authed) return <AuthGate onOk={()=>setAuthed(true)} expected={settings.accessCode} />;
  return (<div className="min-h-screen bg-gradient-to-b from-slate-50 to-white text-slate-800">
    <header className="sticky top-0 z-10 border-b bg-white/80 backdrop-blur"><div className="mx-auto flex max-w-6xl items-center justify-between px-4 py-3">
      <div className="flex items-center gap-3"><span className="text-2xl">⚽️</span><div><h1 className="text-xl font-bold">Nogometni termin — Online</h1><p className="text-xs text-slate-500">Crvena • Crna • Bijela • Plava (2–4 ekipe, 3-1-0)</p></div></div>
      <nav className="flex gap-2">{["Pregled","Igrači","Prijave","Sastavi","Termini","Postavke"].map(t=>(<Button key={t} onClick={()=>setTab(t)} className={tab===t?"bg-slate-900 text-white":"bg-white"}>{t}</Button>))}</nav>
    </div></header>
    <main className="mx-auto grid max-w-6xl gap-6 px-4 py-6">
      {tab==="Pregled" && <Overview sessions={sessions} />}
      {tab==="Igrači" && <PlayersTab players={players} setPlayers={setPlayers} overall={useMemo(()=>computeOverall(players,sessions,settings),[players,sessions,settings])} />}
      {tab==="Prijave" && <SignupsTab signups={signups} setSignups={setSignups} players={players} />}
      {tab==="Sastavi" && <BuilderTab players={players} signups={signups} setSignups={setSignups} />}
      {tab==="Termini" && <SessionsTab players={players} sessions={sessions} setSessions={setSessions} settings={settings} />}
      {tab==="Postavke" && <SettingsTab settings={settings} setSettings={setSettings} />}
    </main>
  </div>);
}
function SetupLink(){ return (<div className="grid min-h-screen place-items-center p-6"><div className="w-full max-w-xl rounded-2xl border bg-white p-6 shadow"><h2 className="mb-2 text-lg font-semibold">Nema konfiguracije</h2><p className="text-sm text-slate-600 mb-3">Otvorite <code>config.html</code> da generirate link s postavkama (Firebase + Group ID) i podijelite ga ekipi.</p><a className="rounded-2xl border px-3 py-2 bg-slate-900 text-white" href="./config.html">Otvori generator linka</a></div></div>); }
function AuthGate({ expected, onOk }){ const [code,setCode]=useState(""); const [err,setErr]=useState(""); function submit(e){ e.preventDefault(); if(!expected || code===expected) onOk(); else setErr("Netočna lozinka."); } return (<div className="grid min-h-screen place-items-center bg-slate-50 p-6"><form onSubmit={submit} className="w-full max-w-sm rounded-2xl border bg-white p-6 shadow"><h2 className="mb-3 text-lg font-semibold">Pristup grupi</h2><p className="mb-4 text-sm text-slate-500">Unesite dogovoreni pristupni kod.</p><Input value={code} onChange={setCode} placeholder="Pristupni kod" />{err && <p className="mt-2 text-sm text-red-600">{err}</p>}<Button type="submit" className="mt-4 w-full bg-slate-900 text-white">Uđi</Button></form></div>); }
function Overview({ sessions }){ const today=new Date(); const yyyy=today.getFullYear(); const [mode,setMode]=useState("Ukupno"); const [month,setMonth]=useState(String(today.getMonth()+1).padStart(2,"0")); const [year,setYear]=useState(String(yyyy)); const [from,setFrom]=useState(""); const [to,setTo]=useState(""); const [seasonId,setSeasonId]=useState(""); const [minMatches,setMinMatches]=useState(1); const [minAttendancePct,setMinAttendancePct]=useState(0); const [sortBy,setSortBy]=useState("points"); const settings = loadLS("nt_settings", DEFAULT_SETTINGS);
  const filtered = React.useMemo(()=>{ let fFrom=null,fTo=null; if(mode==="Mjesec"){ fFrom=`${year}-${month}-01`; const lastDay=new Date(parseInt(year,10),parseInt(month,10),0).getDate(); fTo=`${year}-${month}-${String(lastDay).padStart(2,"0")}`; } else if(mode==="Raspon"){ fFrom=from||null; fTo=to||null; } else if(mode==="Sezona" && seasonId){ const s=loadLS("nt_settings", DEFAULT_SETTINGS).seasons?.find(x=>x.id===seasonId); fFrom=s?.start||null; fTo=s?.end||null; } const sess = sessions.filter(s=> inRange(s.dateISO, fFrom, fTo)); const stats = computeOverall(loadLS("nt_players", []), sess, settings); const totalSessions = sess.length || 1; let rows = stats.playersSorted.map(r=>({ ...r, attendance:r.sessions||0, attendancePct:((r.sessions||0)/totalSessions)*100, ppm: r.matches? r.points/r.matches : 0 })); rows = rows.filter(r=> r.matches>=minMatches && r.attendancePct>=minAttendancePct); if (sortBy==="ppm") rows.sort((a,b)=> b.ppm - a.ppm || b.gd - a.gd); else if (sortBy==="attendance") rows.sort((a,b)=> b.attendancePct - a.attendancePct || b.points - a.points); return { rows, totalSessions }; }, [mode,month,year,from,to,seasonId,minMatches,minAttendancePct,sortBy,sessions]);
  return (<div className="grid gap-6 md:grid-cols-2"><Card title="Filter statistike"><div className="grid gap-2 sm:grid-cols-6"><Select value={mode} onChange={setMode} options={["Ukupno","Sezona","Mjesec","Raspon"].map(v=>({value:v,label:v}))} className="sm:col-span-2" />{mode==="Mjesec" && (<><Select value={month} onChange={setMonth} options={[...Array(12)].map((_,i)=>({value:String(i+1).padStart(2,"0"),label:String(i+1)}))} /><Input value={year} onChange={setYear} placeholder="Godina" type="number" /></>)}{mode==="Raspon" && (<><Input type="date" value={from} onChange={setFrom} /><Input type="date" value={to} onChange={setTo} /></>)}{mode==="Sezona" && (<Select value={seasonId} onChange={setSeasonId} options={[{value:"",label:"Odaberi sezonu"},...(loadLS("nt_settings", DEFAULT_SETTINGS).seasons||[]).map(s=>({value:s.id,label:s.name}))]} />)}<label className="text-sm">Min. utakmica<Input type="number" value={minMatches} onChange={v=>setMinMatches(parseInt(v||"1",10))} className="mt-1" /></label><label className="text-sm">Min. dolazak %<Input type="number" value={minAttendancePct} onChange={v=>setMinAttendancePct(parseInt(v||"0",10))} className="mt-1" /></label><label className="text-sm">Sortiraj po<Select value={sortBy} onChange={setSortBy} options={[{value:"points",label:"Bodovi"},{value:"ppm",label:"Prosjek bodova"},{value:"attendance",label:"Dolazak %"}]} className="mt-1" /></label></div></Card><Card title="Poredak igrača (filtrirano)"><table className="w-full text-sm"><thead className="text-left text-xs text-slate-500"><tr><th>#</th><th>Igrač</th><th>Ut</th><th>Dol.</th><th>Dol. %</th><th>Bod</th><th>GR</th><th>Prosj. bod</th></tr></thead><tbody>{filtered.rows.map((p,i)=>(<tr key={p.id} className="border-t"><td className="py-1 pr-2 text-slate-500">{i+1}</td><td className="py-1">{p.name}{p.isGK && <Badge className="ml-2">GK</Badge>}</td><td className="py-1">{p.matches}</td><td className="py-1">{p.attendance}</td><td className="py-1">{p.attendancePct.toFixed(0)}%</td><td className="py-1 font-medium">{p.points}</td><td className="py-1">{p.gd}</td><td className="py-1">{(p.ppm||0).toFixed(2)}</td></tr>))}{!filtered.rows.length && (<tr><td colSpan={8} className="py-3 text-center text-xs text-slate-500">Nema podataka za odabrani filter.</td></tr>)}</tbody></table></Card></div>); }
function PlayersTab({players,setPlayers,overall}){ const [name,setName]=useState(""); const [isGK,setIsGK]=useState(false); function add(){ if(!name.trim()) return; setPlayers([...players,{id:uid("p"), name:name.trim(), isGK, active:true}]); setName(""); setIsGK(false); } function del(id){ if(!confirm("Obrisati igrača?")) return; setPlayers(players.filter(p=>p.id!==id)); } return (<div className="grid gap-6 md:grid-cols-2"><Card title="Dodaj igrača" right={<Badge>{players.length} ukupno</Badge>}><div className="grid gap-2 sm:grid-cols-3"><Input value={name} onChange={setName} placeholder="Ime i prezime" className="sm:col-span-2" /><label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={isGK} onChange={e=>setIsGK(e.target.checked)} /> Golman</label><div className="sm:col-span-3"><Button onClick={add} className="bg-slate-900 text-white">Spremi</Button></div></div></Card><Card title="Igrači"><table className="w-full text-sm"><thead className="text-left text-xs text-slate-500"><tr><th>Ime</th><th>GK</th><th>Aktivan</th><th className="text-right">Akcije</th></tr></thead><tbody>{players.map(p=>(<tr key={p.id} className="border-t"><td className="py-1">{p.name}</td><td className="py-1">{p.isGK?"✔":"—"}</td><td className="py-1"><input type="checkbox" checked={p.active} onChange={e=>setPlayers(players.map(x=>x.id===p.id?{...x,active:e.target.checked}:x))} /></td><td className="py-1 text-right"><Button className="mr-2" onClick={()=>{ const newName=prompt("Uredi ime",p.name)||p.name; const isGKnew=confirm("Označi kao golmana? (OK = da, Cancel = ne)"); setPlayers(players.map(x=>x.id===p.id?{...x,name:newName,isGK:isGKnew}:x)); }}>Uredi</Button><Button className="border-red-300 text-red-700" onClick={()=>del(p.id)}>Obriši</Button></td></tr>))}</tbody></table></Card></div>); }
function SignupsTab({ signups, setSignups, players }){ const [text,setText]=useState(""); const activePlayers=players.filter(p=>p.active); function addFromSelect(id){ if(!id) return; if(signups.find(s=>s.playerId===id)) return; const p=players.find(x=>x.id===id); setSignups([...signups,{id:uid("su"),playerId:id,name:p?.name||"",isGK:p?.isGK||false}]); } function addManual(){ const name=text.trim(); if(!name) return; setSignups([...signups,{id:uid("su"),playerId:null,name,isGK:false}]); setText(""); } return (<div className="grid gap-6 md:grid-cols-2"><Card title="Prijava dolaska (sljedeći termin)"><div className="grid gap-2 sm:grid-cols-3"><Select value="" onChange={addFromSelect} options={[{value:"",label:"Dodaj iz popisa igrača"},...activePlayers.map(p=>({value:p.id,label:p.name}))]} /><div className="sm:col-span-2 flex gap-2"><Input value={text} onChange={setText} placeholder="Dodaj ručno (gost)" /><Button onClick={addManual} className="bg-slate-900 text-white">Dodaj</Button></div></div><div className="mt-4 grid gap-2">{signups.map(s=>(<div key={s.id} className="flex items-center justify-between rounded-xl border p-2"><div className="flex items-center gap-2 text-sm"><span className="font-medium">{s.name}</span>{s.isGK && <Badge>GK</Badge>}</div><div className="flex items-center gap-2"><label className="text-sm"><input type="checkbox" checked={s.isGK} onChange={e=>setSignups(signups.map(x=>x.id===s.id?{...x,isGK:e.target.checked}:x))} /> golman</label><Button onClick={()=>setSignups(signups.filter(x=>x.id!==s.id))}>Ukloni</Button></div></div>))}{!signups.length && <p className="text-sm text-slate-500">Nitko još nije prijavljen.</p>}</div></Card></div>); }
function BuilderTab({ players, signups, setSignups }){ const [teamCount,setTeamCount]=useState(3); const [result,setResult]=useState(null); const playerRatings = React.useMemo(()=>{ const fromLS=loadLS("nt_sessions",[]); const settings=loadLS("nt_settings",DEFAULT_SETTINGS); const overall=computeOverall(players,fromLS,settings); const map=new Map(overall.playersSorted.map(p=>[p.name,p])); return signups.map(s=>{ const rec=map.get(s.name); const ppm=rec&&rec.matches? rec.points/rec.matches : 0; const gdm=rec&&rec.matches? rec.gd/rec.matches : 0; const rating=ppm*10+gdm; return {...s, rating}; }); },[players,signups]); function build(){ const N=Math.min(Math.max(teamCount,2),4); const teams=TEAM_ORDER.slice(0,N).map(name=>({name,players:[]})); const gk=playerRatings.filter(p=>p.isGK).sort((a,b)=>b.rating-a.rating); const field=playerRatings.filter(p=>!p.isGK).sort((a,b)=>b.rating-a.rating); for(let i=0;i<Math.min(N,gk.length);i++) teams[i].players.push(gk[i]); const pool=[...gk.slice(N),...field]; let dir=1, idx=0; for(const p of pool){ teams[idx].players.push(p); if(dir===1){ idx++; if(idx>=N){ idx=N-1; dir=-1; } } else { idx--; if(idx<0){ idx=0; dir=1; } } } teams.forEach(t=> t.rating = t.players.reduce((a,b)=>a+(b.rating||0),0)); setResult(teams); } function clearSignups(){ if(confirm("Očistiti prijave?")) setSignups([]); } return (<div className="grid gap-6 md:grid-cols-2"><Card title="Generator momčadi" right={<Badge>{signups.length} prijavljenih</Badge>}><div className="grid gap-3"><label className="text-sm">Broj ekipa (2–4):<Input type="number" value={teamCount} onChange={v=>setTeamCount(parseInt(v||"3",10))} className="mt-1 w-24" /></label><div className="flex gap-2"><Button onClick={build} className="bg-slate-900 text-white">Složi ekipe</Button><Button onClick={clearSignups}>Očisti prijave</Button></div><p className="text-xs text-slate-500">Balansiranje prema prosjeku bodova i gol-razlike. GK raspoređeni ravnomjerno.</p></div></Card><Card title="Rezultat slaganja">{!result && <p className="text-sm text-slate-500">Za prikaz prvo složite ekipe.</p>}{result && (<div className="grid gap-3">{result.map(t=>(<div key={t.name} className="rounded-xl border p-3"><div className="mb-2 flex items-center justify-between"><div className="rounded-lg border px-2 py-0.5 text-sm font-semibold" style={teamStyle(loadLS('nt_settings', DEFAULT_SETTINGS), t.name)}>{t.name}</div><div className="text-xs text-slate-500">Zbroj rejtinga: {t.rating.toFixed(1)}</div></div><ul className="text-sm">{t.players.map(p=>(<li key={p.id} className="flex items-center justify-between border-t py-1 first:border-t-0"><span>{p.name} {p.isGK && <Badge className="ml-2">GK</Badge>}</span><span className="text-xs text-slate-500">r={p.rating.toFixed(1)}</span></li>))}</ul></div>))}</div>)}</Card></div>); }
function SessionsTab({ players, sessions, setSessions, settings }){ const [title,setTitle]=useState(""); const [dateISO,setDateISO]=useState(()=> new Date().toISOString().slice(0,10)); const [teamCount,setTeamCount]=useState(3); function createSession(){ const N=Math.min(Math.max(teamCount,2),4); const teams=TEAM_ORDER.slice(0,N); const matches=emptyMatches(teams); const session={id:uid("s"),title:title||undefined,dateISO,teams,matches}; setSessions([...sessions,session]); setTitle(""); } function updateMatch(sessionId,matchId,patch){ setSessions(sessions.map(s=> s.id!==sessionId ? s : ({...s, matches: s.matches.map(m=> m.id===matchId ? ({...m, ...patch}) : m)}))); } function attachPlayers(sessionId,matchId,teamKey,playerIds){ setSessions(sessions.map(s=>{ if(s.id!==sessionId) return s; return {...s, matches: s.matches.map(m=>{ if(m.id!==matchId) return m; const field=teamKey==="A"?"playersA":"playersB"; return {...m, [field]: playerIds}; })}; })); } function standingsForSession(s){ const table=new Map(s.teams.map(t=>[t,{team:t,pts:0,gd:0,p:0}])); for(const m of s.matches){ const {a,b,aGD,bGD}=calc(m.scoreA,m.scoreB,settings); if(m.scoreA==null||m.scoreB==null) continue; const ta=table.get(m.teamA), tb=table.get(m.teamB); ta.pts+=a; tb.pts+=b; ta.gd+=aGD; tb.gd+=bGD; ta.p++; tb.p++; } return Array.from(table.values()).sort((x,y)=> y.pts - x.pts || y.gd - x.gd); } function addPlayoffs(sid){ setSessions(sessions.map(s=>{ if(s.id!==sid) return s; const table=standingsForSession(s); const order=table.map(r=>r.team); const pf=playoffs(order); return {...s, matches:[...s.matches, ...pf]}; })); } return (<div className="grid gap-6"><Card title="Novi termin"><div className="grid gap-3 sm:grid-cols-5"><Input value={title} onChange={setTitle} placeholder="Naslov (npr. Srijeda 20:00)" className="sm:col-span-2" /><Input type="date" value={dateISO} onChange={setDateISO} /><label className="text-sm">Broj ekipa<Input type="number" value={teamCount} onChange={v=>setTeamCount(parseInt(v||"3",10))} className="mt-1" /></label><div className="flex items-end"><Button onClick={createSession} className="w-full bg-slate-900 text-white">Kreiraj</Button></div></div></Card>{sessions.map(s=>(<Card key={s.id} title={s.title || new Date(s.dateISO).toLocaleDateString()} right={<Badge>{s.teams.join(" • ")}</Badge>}><div className="grid gap-4"><div className="overflow-auto rounded-xl border"><table className="w-full text-sm"><thead className="bg-slate-50 text-left text-xs text-slate-500"><tr><th className="px-2 py-2">Utakmica</th><th className="px-2">Igrači (A)</th><th className="px-2">Rezultat</th><th className="px-2">Igrači (B)</th></tr></thead><tbody>{s.matches.map(m=>(<tr key={m.id} className="border-t"><td className="px-2 py-2"><div className="flex items-center gap-2"><Badge style={teamStyle(loadLS('nt_settings', DEFAULT_SETTINGS), m.teamA)}>{m.teamA}</Badge><span className="text-slate-400">vs</span><Badge style={teamStyle(loadLS('nt_settings', DEFAULT_SETTINGS), m.teamB)}>{m.teamB}</Badge></div></td><td className="px-2"><PlayerPicker players={players} selected={m.playersA} onChange={ids=>attachPlayers(s.id,m.id,"A",ids)} /></td><td className="px-2"><div className="flex items-center gap-2"><Input type="number" value={m.scoreA ?? ""} onChange={v=>updateMatch(s.id,m.id,{scoreA: v===""?null:parseInt(v,10)})} className="w-16" /><span>:</span><Input type="number" value={m.scoreB ?? ""} onChange={v=>updateMatch(s.id,m.id,{scoreB: v===""?null:parseInt(v,10)})} className="w-16" /></div></td><td className="px-2"><PlayerPicker players={players} selected={m.playersB} onChange={ids=>attachPlayers(s.id,m.id,"B",ids)} /></td></tr>))}</tbody></table></div><div className="flex flex-wrap items-center justify-between gap-2"><SessionStandings rows={standingsForSession(s)} />{loadLS('nt_settings', DEFAULT_SETTINGS).allowPlayoffsOnFourTeams && s.teams.length===4 && (<Button onClick={()=>addPlayoffs(s.id)} className="bg-white">Dodaj razigravanje (1–2, 3–4)</Button>)}</div></div></Card>))}</div>); }
function PlayerPicker({players,selected,onChange}){ const [query,setQuery]=useState(""); const opts=players.filter(p=>p.active && p.name.toLowerCase().includes(query.toLowerCase())); function toggle(id){ if(selected.includes(id)) onChange(selected.filter(x=>x!==id)); else onChange([...selected, id]); } return (<div><Input value={query} onChange={setQuery} placeholder="Pretraži igrače" /><div className="mt-2 flex flex-wrap gap-2">{opts.map(p=>(<button key={p.id} onClick={()=>toggle(p.id)} className={"rounded-full border px-2 py-1 text-xs "+(selected.includes(p.id)?"bg-slate-900 text-white":"bg-white")}>{p.name}{p.isGK && <span className="ml-1 opacity-70">(GK)</span>}</button>))}{!opts.length && <span className="text-xs text-slate-400">Nema rezultata…</span>}</div></div>); }
function SessionStandings({rows}){ return (<div className="rounded-xl border p-3"><div className="mb-2 text-sm font-semibold">Poredak (termin)</div><table className="text-xs"><thead className="text-left text-slate-500"><tr><th>Ekipa</th><th>Ut</th><th>Bod</th><th>GR</th></tr></thead><tbody>{rows.map(r=>(<tr key={r.team} className="border-t"><td className="py-1"><Badge style={teamStyle(loadLS('nt_settings', DEFAULT_SETTINGS), r.team)}>{r.team}</Badge></td><td className="py-1">{r.p}</td><td className="py-1 font-medium">{r.pts}</td><td className="py-1">{r.gd}</td></tr>))}</tbody></table></div>); }
function SettingsTab({ settings, setSettings }){ function exportAll(){ const data={ settings:loadLS("nt_settings",DEFAULT_SETTINGS), players:loadLS("nt_players",[]), sessions:loadLS("nt_sessions",[]), signups:loadLS("nt_signups",[]) }; const blob=new Blob([JSON.stringify(data,null,2)],{type:"application/json"}); const a=document.createElement("a"); a.href=URL.createObjectURL(blob); a.download="nogometni-termin-backup-"+new Date().toISOString().slice(0,10)+".json"; a.click(); } function shareBackup(){ const data={ settings:loadLS("nt_settings",DEFAULT_SETTINGS), players:loadLS("nt_players",[]), sessions:loadLS("nt_sessions",[]), signups:loadLS("nt_signups",[]), ts:new Date().toISOString() }; const blob=new Blob([JSON.stringify(data,null,2)],{type:"application/json"}); const file=new File([blob],'termin-backup.json',{type:'application/json'}); if (navigator.share && navigator.canShare?.({files:[file]})){ navigator.share({ files:[file], title:'Backup termina', text:'Sigurnosna kopija podataka' }).catch(()=>{}); } else { const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='termin-backup.json'; a.click(); } } function importAll(file){ const reader=new FileReader(); reader.onload=()=>{ try{ const data=JSON.parse(reader.result); if(data.settings) saveLS("nt_settings",data.settings); if(data.players) saveLS("nt_players",data.players); if(data.sessions) saveLS("nt_sessions",data.sessions); if(data.signups) saveLS("nt_signups",data.signups); location.reload(); } catch { alert("Neispravna datoteka."); } }; reader.readAsText(file); } return (<div className="grid gap-6 md:grid-cols-2"><Card title="Bodovanje i pristup"><div className="grid gap-3 sm:grid-cols-2"><label className="text-sm">Pobjeda (bodova)<Input type="number" value={settings.points.win} onChange={v=>setSettings({...settings, points:{...settings.points, win: parseInt(v||"0",10)}})} className="mt-1" /></label><label className="text-sm">Neriješeno (bodova)<Input type="number" value={settings.points.draw} onChange={v=>setSettings({...settings, points:{...settings.points, draw: parseInt(v||"0",10)}})} className="mt-1" /></label><label className="text-sm">Poraz (bodova)<Input type="number" value={settings.points.loss} onChange={v=>setSettings({...settings, points:{...settings.points, loss: parseInt(v||"0",10)}})} className="mt-1" /></label><label className="text-sm sm:col-span-2">Pristupni kod (prazno = bez lozinke)<Input value={settings.accessCode} onChange={v=>setSettings({...settings, accessCode: v})} className="mt-1" /></label><label className="flex items-center gap-2 text-sm sm:col-span-2"><input type="checkbox" checked={settings.allowPlayoffsOnFourTeams} onChange={e=>setSettings({...settings, allowPlayoffsOnFourTeams: e.target.checked})} /> Razigravanje na 4 ekipe</label></div></Card><Card title="Boje ekipa"><div className="grid gap-3 sm:grid-cols-2">{Object.keys(DEFAULT_SETTINGS.teamColors).map(name=> (<div key={name} className="rounded-xl border p-3"><div className="mb-2 flex items-center justify-between"><div className="text-sm font-semibold">{name}</div><Badge style={teamStyle(settings, name)}>{name}</Badge></div><div className="grid grid-cols-3 items-center gap-2 text-sm"><span>BG</span><input type="color" value={(settings.teamColors?.[name]?.bg)||DEFAULT_SETTINGS.teamColors[name].bg} onChange={e=> setSettings({...settings, teamColors: {...(settings.teamColors||{}), [name]: {...(settings.teamColors?.[name]||{}), bg: e.target.value }}})} /><span className="text-xs text-slate-500">pozadina</span><span>Text</span><input type="color" value={(settings.teamColors?.[name]?.text)||DEFAULT_SETTINGS.teamColors[name].text} onChange={e=> setSettings({...settings, teamColors: {...(settings.teamColors||{}), [name]: {...(settings.teamColors?.[name]||{}), text: e.target.value }}})} /><span className="text-xs text-slate-500">tekst</span><span>Border</span><input type="color" value={(settings.teamColors?.[name]?.border)||DEFAULT_SETTINGS.teamColors[name].border} onChange={e=> setSettings({...settings, teamColors: {...(settings.teamColors||{}), [name]: {...(settings.teamColors?.[name]||{}), border: e.target.value }}})} /><span className="text-xs text-slate-500">rub</span></div></div>))}</div></Card><Card title="Sigurnosna kopija"><div className="flex flex-wrap items-center gap-2"><Button onClick={exportAll} className="bg-slate-900 text-white">Preuzmi backup (.json)</Button><Button onClick={shareBackup}>Podijeli backup</Button><label className="inline-flex items-center gap-2 text-sm"><input type="file" accept="application/json" onChange={e=> e.target.files?.[0] && importAll(e.target.files[0])} /> Uvezi JSON</label></div><p className="mt-3 text-xs text-slate-500">Auto-backup se sprema lokalno pri svakoj promjeni. Na mobitelu koristi „Podijeli backup”.</p></Card></div>); }
function Root(){ return <App boot={window.__NT_BOOT__} /> } window.START_APP = function(){ ReactDOM.createRoot(document.getElementById("root")).render(<Root />); };
